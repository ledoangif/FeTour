{
  "version": 3,
  "sources": ["../../../../dayjs/plugin/duration.d.ts"],
  "sourcesContent": ["import { PluginFunc } from 'dayjs'\nimport { OpUnitType, UnitTypeLongPlural } from 'dayjs';\n\ndeclare const plugin: PluginFunc\nexport as namespace plugin;\nexport = plugin\n\ndeclare namespace plugin {\n  /**\n   * @deprecated Please use more strict types\n   */\n  type DurationInputType = string | number | object\n  /**\n   * @deprecated Please use more strict types\n   */\n  type DurationAddType = number | object | Duration\n  \n  type DurationUnitsObjectType = Partial<{\n    [unit in Exclude<UnitTypeLongPlural, \"dates\"> | \"weeks\"]: number\n  }>;\n  type DurationUnitType = Exclude<OpUnitType, \"date\" | \"dates\">\n  type CreateDurationType = \n    ((units: DurationUnitsObjectType) => Duration)\n    & ((time: number, unit?: DurationUnitType) => Duration)\n    & ((ISO_8601: string) => Duration)\n  type AddDurationType = CreateDurationType & ((duration: Duration) => Duration)\n\n  interface Duration {\n    new (input: string | number | object, unit?: string, locale?: string): Duration\n\n    clone(): Duration\n\n    humanize(withSuffix?: boolean): string\n\n    milliseconds(): number\n    asMilliseconds(): number\n\n    seconds(): number\n    asSeconds(): number\n\n    minutes(): number\n    asMinutes(): number\n\n    hours(): number\n    asHours(): number\n\n    days(): number\n    asDays(): number\n\n    weeks(): number\n    asWeeks(): number\n\n    months(): number\n    asMonths(): number\n\n    years(): number\n    asYears(): number\n\n    as(unit: DurationUnitType): number\n\n    get(unit: DurationUnitType): number\n\n    add: AddDurationType\n    \n    subtract: AddDurationType\n\n    toJSON(): string\n\n    toISOString(): string\n\n    format(formatStr?: string): string\n\n    locale(locale: string): Duration\n  }\n}\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    add(duration: plugin.Duration): Dayjs\n    subtract(duration: plugin.Duration): Dayjs\n  }\n\n  /**\n   * @param time If unit is not present, time treated as number of milliseconds\n   */\n  export const duration: plugin.CreateDurationType;\n  export function isDuration(d: any): d is plugin.Duration\n}"],
  "mappings": ";AAKA,4BAAS;",
  "names": []
}
